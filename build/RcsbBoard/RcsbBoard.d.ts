import { RcsbD3Manager } from "./RcsbD3/RcsbD3Manager";
import { RcsbFvContextManager } from "../RcsbFv/RcsbFvContextManager/RcsbFvContextManager";
import { RcsbDisplayInterface } from "./RcsbDisplay/RcsbDisplayInterface";
import { RcsbFvTrackDataElementInterface } from "../RcsbDataManager/RcsbDataManager";
import { RcsbSelection } from "./RcsbSelection";
import { RcsbScaleInterface } from "./RcsbD3/RcsbD3ScaleFactory";
export interface LocationViewInterface {
    from: number;
    to: number;
}
export declare class RcsbBoard {
    readonly d3Manager: RcsbD3Manager;
    private readonly domId;
    private readonly boardDiv;
    private _width;
    private _bgColor;
    private _innerPadding;
    private tracks;
    elementClickCallBack: (d?: RcsbFvTrackDataElementInterface, e?: MouseEvent) => void;
    private highlightHoverElementFlag;
    private readonly _xScale;
    private readonly selection;
    private limits;
    private currentLocationView;
    private updateTask;
    private updateDelay;
    private upToDate;
    private isIntersecting;
    private zoomEventHandler;
    private mouseoverCallBack;
    private mouseoutCallBack;
    private mousemoveCallBack;
    private readonly mouseHoverCallBack;
    private readonly contextManager;
    private readonly scrollEvent;
    constructor(elementId: string, xScale: RcsbScaleInterface, selection: RcsbSelection, contextManager: RcsbFvContextManager);
    removeScrollEvent(): void;
    private addSVG;
    private addMainG;
    setElementClickCallBack(f: (d?: RcsbFvTrackDataElementInterface, e?: MouseEvent) => void): void;
    setHighlightHoverPosition(): void;
    addHoverCallBack(f: (n: Array<RcsbFvTrackDataElementInterface>) => void): void;
    setRange(from: number, to: number): void;
    setSelection(boardId: string, mode: 'select' | 'hover'): void;
    highlightRegion(d: RcsbFvTrackDataElementInterface | null, operation: 'set' | 'add' | 'replace-last', mode: 'select' | 'hover', propFlag?: boolean): void;
    private moveSelection;
    startBoard(): void;
    private startTracks;
    private updateBoard;
    reset(): void;
    setHighlightHoverElement(flag: boolean): void;
    private addHighlightHoverElement;
    addTrack(track: RcsbDisplayInterface | Array<RcsbDisplayInterface>, options?: {}): void;
    private addTrackCallBacks;
    private setBoardHeight;
    setBoardWidth(w: number): void;
    private setLocation;
    private updateAllTracks;
    private moveAllTracks;
    xScale(): RcsbScaleInterface;
    private moveBoard;
    private updateAndMove;
    private updateWithDelay;
    setScale(domId: string): void;
    getSelection(): RcsbSelection;
    private triggerScaleEvent;
    private triggerSelectionEvent;
}
