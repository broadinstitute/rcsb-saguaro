import { RcsbAbstractTrack } from "./RcsbAbstractTrack";
import { Selection, BaseType } from "d3-selection";
import { LocationViewInterface } from "../RcsbBoard";
import { RcsbFvColorGradient, RcsbFvTrackData, RcsbFvTrackDataElementInterface } from "../../RcsbDataManager/RcsbDataManager";
import { RcsbTooltipManager } from "../RcsbTooltip/RcsbTooltipManager";
import { RcsbDisplayInterface } from "./RcsbDisplayInterface";
export declare abstract class RcsbAbstractDisplay extends RcsbAbstractTrack implements RcsbDisplayInterface {
    protected _displayColor: string | RcsbFvColorGradient;
    private elementClickCallBack;
    private elementEnterCallBack;
    private elementLeaveCallBack;
    private highlightEnterElement;
    private highlightLeaveElement;
    protected includeTooltip: boolean;
    private readonly boardId;
    private readonly trackId;
    protected tooltipManager: RcsbTooltipManager;
    protected minRatio: number;
    private selectDataInRangeFlag;
    private hideEmptyTracksFlag;
    private hidden;
    private elementSelection;
    constructor(boardId: string, trackId: string);
    setElementClickCallBack(f: (d?: RcsbFvTrackDataElementInterface, e?: MouseEvent) => void): void;
    getElementClickCallBack(): (d?: RcsbFvTrackDataElementInterface, e?: MouseEvent) => void;
    setElementEnterCallBack(f: (d?: RcsbFvTrackDataElementInterface, e?: MouseEvent) => void): void;
    getElementEnterCallBack(): (d?: RcsbFvTrackDataElementInterface, e?: MouseEvent) => void;
    setElementLeaveCallBack(f: (d?: RcsbFvTrackDataElementInterface, e?: MouseEvent) => void): void;
    setTooltip(flag: boolean): void;
    setDisplayColor(color: string | RcsbFvColorGradient): void;
    setMinRatio(ratio: number): void;
    setSelectDataInRange(flag: boolean): void;
    setHideEmptyTrack(flag: boolean): void;
    reset(): void;
    setHighlightHoverElement(enter: (d?: RcsbFvTrackDataElementInterface) => void, leave: (d?: RcsbFvTrackDataElementInterface) => void): void;
    plot(element: Selection<SVGGElement, RcsbFvTrackDataElementInterface, BaseType, undefined>): void;
    update(compKey?: string): void;
    _update(where: LocationViewInterface, compKey?: string): void;
    displayEmpty(): void;
    move(): void;
    protected processData(dataElems: RcsbFvTrackData): RcsbFvTrackData;
    protected selectElements(dataElems: RcsbFvTrackData, compKey?: string): Selection<SVGGElement, RcsbFvTrackDataElementInterface, BaseType, undefined>;
    enter(e: Selection<SVGGElement, RcsbFvTrackDataElementInterface, BaseType, undefined>): void;
    getElements(): Selection<SVGGElement, RcsbFvTrackDataElementInterface, BaseType, undefined>;
    protected static dataKey(d: RcsbFvTrackDataElementInterface): string;
    protected getRatio(): number;
}
